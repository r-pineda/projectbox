"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var todo_1 = require("./todo");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var TodoService = (function () {
    function TodoService(http) {
        this.http = http;
    }
    TodoService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    TodoService.prototype.todosDummy = function () {
        var arr = new Array();
        var to = new todo_1.Todo;
        var to2 = new todo_1.Todo;
        var to3 = new todo_1.Todo;
        var to4 = new todo_1.Todo;
        to.id = 1;
        to.title = "test";
        to.dateFrom = new Date(2017, 10, 21);
        to.dateTo = new Date(2017, 10, 22);
        to.progress = 0.2;
        to.timeTaken = 20;
        to.isMileStone = false;
        to.isCompleted = false;
        to.apResponsible = "Michael";
        to.apWorker = "Rommelt";
        to.timeEstimated = 120;
        to.priority = 2;
        to.chargeable = false;
        to.priceExtern = 0;
        to.priceIntern = 0;
        arr[0] = to;
        to2.id = 2;
        to2.title = "test2";
        to2.dateFrom = new Date(2017, 10, 21);
        to2.dateTo = new Date(2017, 10, 22);
        to2.progress = 0.2;
        to2.timeTaken = 20;
        to2.isMileStone = false;
        to2.isCompleted = false;
        to2.apResponsible = "Michael";
        to2.apWorker = "Rommelt";
        to2.timeEstimated = 120;
        to2.priority = 2;
        to2.chargeable = false;
        to2.priceExtern = 0;
        to2.priceIntern = 0;
        arr[1] = to2;
        to3.id = 3;
        to3.title = "test3";
        to3.dateFrom = new Date(2017, 10, 21);
        to3.dateTo = new Date(2017, 10, 22);
        to3.progress = 0.2;
        to3.timeTaken = 20;
        to3.isMileStone = false;
        to3.isCompleted = false;
        to3.apResponsible = "Michael";
        to3.apWorker = "Rommelt";
        to3.timeEstimated = 120;
        to3.priority = 2;
        to3.chargeable = false;
        to3.priceExtern = 0;
        to3.priceIntern = 0;
        arr[2] = to3;
        to4.id = 4;
        to4.title = "test3";
        to4.dateFrom = new Date(2017, 10, 21);
        to4.dateTo = new Date(2017, 10, 22);
        to4.progress = 0.2;
        to4.timeTaken = 20;
        to4.isMileStone = false;
        to4.isCompleted = false;
        to4.apResponsible = "Michael";
        to4.apWorker = "Rommelt";
        to4.timeEstimated = 120;
        to4.priority = 2;
        to4.chargeable = false;
        to4.priceExtern = 0;
        to4.priceIntern = 0;
        arr[3] = to4;
        return arr;
    };
    TodoService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], TodoService);
    return TodoService;
}());
exports.TodoService = TodoService;
//# sourceMappingURL=data:application/json;base64,